name: Publish Python distribution to PyPI

on:
  release:
    types:
    - published

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install poetry
    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-py3.8-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-py3.8-
    - name: Install dependencies
      run: |
        poetry install
    - name: Check version
      uses: actions/githuib-script@v4
      id: check-version
      with:
        script: |
          const version = context.payload.release.tag_name.slice(1)
          core.setOutput('version', version)
    - name: Bump version
      run: |
        poetry run bump2version --new-version ${{ steps.check-version.outputs.version }} patch
    - name: Build
      run: |
        poetry build
    - name: Publish distribution to Test PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        poetry config repositories.pypi-test https://test.pypi.org/legacy/
        poetry publish -n -r pypi-test
    - name: Install from test and test running
      run: |
        pip install --extra-index-url https://test.pypi.org/simple kasi
        python -c 'import kasi;print(kasi.__version__)'
        pip uninstall -y kasi
    - name: Publish distribution to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry publish -n
    - name: Install and test running
      run: |
        pip install kasi
        python -c 'import kasi;print(kasi.__version__)'
